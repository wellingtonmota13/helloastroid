{"version":3,"sources":["../../src/bootstrap/index.js"],"names":["Promise","require","glob","_","slash","fs","md5File","crypto","del","apiRunnerNode","graphql","store","emitter","loadPlugins","initCache","report","getConfigFile","process","on","reason","p","panic","extractQueries","runQueries","writePages","writeRedirects","preferDefault","m","default","module","exports","args","program","directory","dispatch","type","payload","activity","activityTimer","start","end","config","flattenedPlugins","pluginVersions","map","version","all","resolve","catch","hashes","pluginsHash","createHash","update","JSON","stringify","concat","digest","state","getState","oldPluginsHash","status","PLUGINS_HASH","info","stripIndent","remove","error","ensureDirSync","srcDir","__dirname","siteDir","tryRequire","copy","clobber","emptyDir","hasAPIFile","env","plugin","sync","ssrPlugins","filter","options","pluginOptions","browserPlugins","browserAPIRunner","readFileSync","err","browserPluginsRequires","join","sSRAPIRunner","ssrPluginsRequires","writeFileSync","extensions","traceId","apiResults","flattenDeep","graphqlRunner","query","context","schema","waitForCascadingActions","NODE_ENV","checkJobsDone","debounce","jobs","active","length","log","uptime","then"],"mappings":"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","file":"index.js","sourcesContent":["/* @flow */\nconst Promise = require(`bluebird`)\n\nconst glob = require(`glob`)\nconst _ = require(`lodash`)\nconst slash = require(`slash`)\nconst fs = require(`fs-extra`)\nconst md5File = require(`md5-file/promise`)\nconst crypto = require(`crypto`)\nconst del = require(`del`)\n\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { graphql } = require(`graphql`)\nconst { store, emitter } = require(`../redux`)\nconst loadPlugins = require(`./load-plugins`)\nconst { initCache } = require(`../utils/cache`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst getConfigFile = require(`./get-config-file`)\n\n// Show stack trace on unhandled promises.\nprocess.on(`unhandledRejection`, (reason, p) => {\n  report.panic(reason)\n})\n\nconst {\n  extractQueries,\n} = require(`../internal-plugins/query-runner/query-watcher`)\nconst {\n  runQueries,\n} = require(`../internal-plugins/query-runner/page-query-runner`)\nconst { writePages } = require(`../internal-plugins/query-runner/pages-writer`)\nconst {\n  writeRedirects,\n} = require(`../internal-plugins/query-runner/redirects-writer`)\n\n// Override console.log to add the source file + line number.\n// Useful for debugging if you lose a console.log somewhere.\n// Otherwise leave commented out.\n// require(`./log-line-function`)\n\nconst preferDefault = m => (m && m.default) || m\n\ntype BootstrapArgs = {\n  directory: string,\n  prefixPaths?: boolean,\n}\n\nmodule.exports = async (args: BootstrapArgs) => {\n  const program = {\n    ...args,\n    // Fix program directory path for windows env.\n    directory: slash(args.directory),\n  }\n\n  store.dispatch({\n    type: `SET_PROGRAM`,\n    payload: program,\n  })\n\n  // Delete html files from the public directory as we don't want deleted\n  // pages from previous builds to stick around.\n  let activity = report.activityTimer(`delete html files from previous builds`)\n  activity.start()\n  await del([\n    `public/*.html`,\n    `public/**/*.html`,\n    `!public/static`,\n    `!public/static/**/*.html`,\n  ])\n  activity.end()\n\n  // Try opening the site's gatsby-config.js file.\n  activity = report.activityTimer(`open and validate gatsby-config.js`)\n  activity.start()\n  const config = await preferDefault(\n    getConfigFile(program.directory, `gatsby-config.js`)\n  )\n\n  store.dispatch({\n    type: `SET_SITE_CONFIG`,\n    payload: config,\n  })\n\n  activity.end()\n\n  const flattenedPlugins = await loadPlugins(config)\n\n  // Check if any plugins have been updated since our last run. If so\n  // we delete the cache is there's likely been changes\n  // since the previous run.\n  //\n  // We do this by creating a hash of all the version numbers of installed\n  // plugins, the site's package.json, gatsby-config.js, and gatsby-node.js.\n  // The last, gatsby-node.js, is important as many gatsby sites put important\n  // logic in there e.g. generating slugs for custom pages.\n  const pluginVersions = flattenedPlugins.map(p => p.version)\n  const hashes = await Promise.all([\n    md5File(`package.json`),\n    Promise.resolve(\n      md5File(`${program.directory}/gatsby-config.js`).catch(() => {})\n    ), // ignore as this file isn't required),\n    Promise.resolve(\n      md5File(`${program.directory}/gatsby-node.js`).catch(() => {})\n    ), // ignore as this file isn't required),\n  ])\n  const pluginsHash = crypto\n    .createHash(`md5`)\n    .update(JSON.stringify(pluginVersions.concat(hashes)))\n    .digest(`hex`)\n  let state = store.getState()\n  const oldPluginsHash = state && state.status ? state.status.PLUGINS_HASH : ``\n\n  // Check if anything has changed. If it has, delete the site's .cache\n  // directory and tell reducers to empty themselves.\n  //\n  // Also if the hash isn't there, then delete things just in case something\n  // is weird.\n  if (oldPluginsHash && pluginsHash !== oldPluginsHash) {\n    report.info(report.stripIndent`\n      One or more of your plugins have changed since the last time you ran Gatsby. As\n      a precaution, we're deleting your site's cache to ensure there's not any stale\n      data\n    `)\n  }\n\n  if (!oldPluginsHash || pluginsHash !== oldPluginsHash) {\n    try {\n      await fs.remove(`${program.directory}/.cache`)\n    } catch (e) {\n      report.error(`Failed to remove .cache files.`, e)\n    }\n    // Tell reducers to delete their data (the store will already have\n    // been loaded from the file system cache).\n    store.dispatch({\n      type: `DELETE_CACHE`,\n    })\n  }\n\n  // Update the store with the new plugins hash.\n  store.dispatch({\n    type: `UPDATE_PLUGINS_HASH`,\n    payload: pluginsHash,\n  })\n\n  // Now that we know the .cache directory is safe, initialize the cache\n  // directory.\n  initCache()\n\n  // Ensure the public/static directory is created.\n  await fs.ensureDirSync(`${program.directory}/public/static`)\n\n  // Copy our site files to the root of the site.\n  activity = report.activityTimer(`copy gatsby files`)\n  activity.start()\n  const srcDir = `${__dirname}/../../cache-dir`\n  const siteDir = `${program.directory}/.cache`\n  const tryRequire = `${__dirname}/../utils/test-require-error.js`\n  try {\n    await fs.copy(srcDir, siteDir, { clobber: true })\n    await fs.copy(tryRequire, `${siteDir}/test-require-error.js`, {\n      clobber: true,\n    })\n    await fs.ensureDirSync(`${program.directory}/.cache/json`)\n    await fs.ensureDirSync(`${program.directory}/.cache/layouts`)\n\n    // Ensure .cache/fragments exists and is empty. We want fragments to be\n    // added on every run in response to data as fragments can only be added if\n    // the data used to create the schema they're dependent on is available.\n    await fs.emptyDir(`${program.directory}/.cache/fragments`)\n  } catch (err) {\n    report.panic(`Unable to copy site files to .cache`, err)\n  }\n\n  // Find plugins which implement gatsby-browser and gatsby-ssr and write\n  // out api-runners for them.\n  const hasAPIFile = (env, plugin) =>\n    // TODO make this async...\n    glob.sync(`${plugin.resolve}/gatsby-${env}*`)[0]\n\n  const ssrPlugins = _.filter(\n    flattenedPlugins.map(plugin => {\n      return {\n        resolve: hasAPIFile(`ssr`, plugin),\n        options: plugin.pluginOptions,\n      }\n    }),\n    plugin => plugin.resolve\n  )\n  const browserPlugins = _.filter(\n    flattenedPlugins.map(plugin => {\n      return {\n        resolve: hasAPIFile(`browser`, plugin),\n        options: plugin.pluginOptions,\n      }\n    }),\n    plugin => plugin.resolve\n  )\n\n  let browserAPIRunner = ``\n\n  try {\n    browserAPIRunner = fs.readFileSync(\n      `${siteDir}/api-runner-browser.js`,\n      `utf-8`\n    )\n  } catch (err) {\n    report.panic(`Failed to read ${siteDir}/api-runner-browser.js`, err)\n  }\n\n  const browserPluginsRequires = browserPlugins\n    .map(\n      plugin =>\n        `{\n      plugin: require('${plugin.resolve}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    )\n    .join(`,`)\n\n  browserAPIRunner = `var plugins = [${browserPluginsRequires}]\\n${browserAPIRunner}`\n\n  let sSRAPIRunner = ``\n\n  try {\n    sSRAPIRunner = fs.readFileSync(`${siteDir}/api-runner-ssr.js`, `utf-8`)\n  } catch (err) {\n    report.panic(`Failed to read ${siteDir}/api-runner-ssr.js`, err)\n  }\n\n  const ssrPluginsRequires = ssrPlugins\n    .map(\n      plugin =>\n        `{\n      plugin: require('${plugin.resolve}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    )\n    .join(`,`)\n  sSRAPIRunner = `var plugins = [${ssrPluginsRequires}]\\n${sSRAPIRunner}`\n\n  fs.writeFileSync(\n    `${siteDir}/api-runner-browser.js`,\n    browserAPIRunner,\n    `utf-8`\n  )\n  fs.writeFileSync(`${siteDir}/api-runner-ssr.js`, sSRAPIRunner, `utf-8`)\n\n  activity.end()\n  /**\n   * Start the main bootstrap processes.\n   */\n\n  // onPreBootstrap\n  activity = report.activityTimer(`onPreBootstrap`)\n  activity.start()\n  await apiRunnerNode(`onPreBootstrap`)\n  activity.end()\n\n  // Source nodes\n  activity = report.activityTimer(`source and transform nodes`)\n  activity.start()\n  await require(`../utils/source-nodes`)()\n  activity.end()\n\n  // Create Schema.\n  activity = report.activityTimer(`building schema`)\n  activity.start()\n  await require(`../schema`)()\n  activity.end()\n\n  // Collect resolvable extensions and attach to program.\n  const extensions = [`.js`, `.jsx`]\n  // Change to this being an action and plugins implement `onPreBootstrap`\n  // for adding extensions.\n  const apiResults = await apiRunnerNode(`resolvableExtensions`, {\n    traceId: `initial-resolvableExtensions`,\n  })\n\n  store.dispatch({\n    type: `SET_PROGRAM_EXTENSIONS`,\n    payload: _.flattenDeep([extensions, apiResults]),\n  })\n\n  const graphqlRunner = (query, context = {}) => {\n    const schema = store.getState().schema\n    return graphql(schema, query, context, context, context)\n  }\n\n  // Collect layouts.\n  activity = report.activityTimer(`createLayouts`)\n  activity.start()\n  await apiRunnerNode(`createLayouts`, {\n    graphql: graphqlRunner,\n    traceId: `initial-createLayouts`,\n    waitForCascadingActions: true,\n  })\n  activity.end()\n\n  // Collect pages.\n  activity = report.activityTimer(`createPages`)\n  activity.start()\n  await apiRunnerNode(`createPages`, {\n    graphql: graphqlRunner,\n    traceId: `initial-createPages`,\n    waitForCascadingActions: true,\n  })\n  activity.end()\n\n  // A variant on createPages for plugins that want to\n  // have full control over adding/removing pages. The normal\n  // \"createPages\" API is called every time (during development)\n  // that data changes.\n  activity = report.activityTimer(`createPagesStatefully`)\n  activity.start()\n  await apiRunnerNode(`createPagesStatefully`, {\n    graphql: graphqlRunner,\n    traceId: `initial-createPagesStatefully`,\n    waitForCascadingActions: true,\n  })\n  activity.end()\n\n  activity = report.activityTimer(`onPreExtractQueries`)\n  activity.start()\n  await apiRunnerNode(`onPreExtractQueries`)\n  activity.end()\n\n  // Update Schema for SitePage.\n  activity = report.activityTimer(`update schema`)\n  activity.start()\n  await require(`../schema`)()\n  activity.end()\n\n  // Extract queries\n  activity = report.activityTimer(`extract queries from components`)\n  activity.start()\n  await extractQueries()\n  activity.end()\n\n  // Start the createPages hot reloader.\n  if (process.env.NODE_ENV !== `production`) {\n    require(`./page-hot-reloader`)(graphqlRunner)\n  }\n\n  // Run queries\n  activity = report.activityTimer(`run graphql queries`)\n  activity.start()\n  await runQueries()\n  activity.end()\n\n  // Write out files.\n  activity = report.activityTimer(`write out page data`)\n  activity.start()\n  try {\n    await writePages()\n  } catch (err) {\n    report.panic(`Failed to write out page data`, err)\n  }\n  activity.end()\n\n  // Write out redirects.\n  activity = report.activityTimer(`write out redirect data`)\n  activity.start()\n  await writeRedirects()\n  activity.end()\n\n  const checkJobsDone = _.debounce(resolve => {\n    const state = store.getState()\n    if (state.jobs.active.length === 0) {\n      report.log(``)\n      report.info(`bootstrap finished - ${process.uptime()} s`)\n      report.log(``)\n\n      // onPostBootstrap\n      activity = report.activityTimer(`onPostBootstrap`)\n      activity.start()\n      apiRunnerNode(`onPostBootstrap`).then(() => {\n        activity.end()\n        resolve({ graphqlRunner })\n      })\n    }\n  }, 100)\n\n  if (store.getState().jobs.active.length === 0) {\n    // onPostBootstrap\n    activity = report.activityTimer(`onPostBootstrap`)\n    activity.start()\n    await apiRunnerNode(`onPostBootstrap`)\n    activity.end()\n\n    report.log(``)\n    report.info(`bootstrap finished - ${process.uptime()} s`)\n    report.log(``)\n    return { graphqlRunner }\n  } else {\n    return new Promise(resolve => {\n      // Wait until all side effect jobs are finished.\n      emitter.on(`END_JOB`, () => checkJobsDone(resolve))\n    })\n  }\n}\n"]}